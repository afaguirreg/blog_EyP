String inputString = "";
boolean stringComplete;

int pins_unidades[7] = {8, 7, 6, 5, 4, 3, 2};

void write_digit(byte cifra) {
  byte i;
  for (i=0; i<7; i++)
  {
    digitalWrite(pins_unidades[i], (cifra>>i)&1);
  }
}

void setup() {
  // put your setup code here, to run once:
  byte i;
  for (i=0; i<7; i++)
  {
    pinMode(pins_unidades[i], OUTPUT);
    digitalWrite(pins_unidades[i], LOW);
  }
  Serial.begin(9600);
}

void loop() {
  // put your main code here, to run repeatedly:
  if (stringComplete==true)
  {
    if (inputString[0]=='$')
    {
      switch (inputString[1])
      {
        case '0': write_digit(0b00111111); break;
        case '1': write_digit(6); break;
        case '2': write_digit(91); break;
        case '3': write_digit(79); break;
        case '4': write_digit(102); break;
        case 53: write_digit(109); break;
        case 54: write_digit(125); break;
        case 55: write_digit(7); break;
        case 56: write_digit(127); break;
        case 57: write_digit(103); break;
        //Escribir cÃ³digo para procesar A-F

        default: write_digit(0); break;
      }
    }
    // clear the string:
    inputString = "";
    stringComplete = false;
  }
}

/*
  SerialEvent occurs whenever a new data comes in the hardware serial RX. This
  routine is run between each time loop() runs, so using delay inside loop can
  delay response. Multiple bytes of data may be available.
*/
void serialEvent() {
  while (Serial.available()) {
    // get the new byte:
    char inChar = (char)Serial.read();
    // add it to the inputString:
    inputString += inChar;
    // if the incoming character is a newline, set a flag so the main loop can
    // do something about it:
    if (inChar == '\n') {
      stringComplete = true;
    }
  }
}